
GMP Compiling
=============
$ CFLAGS+="-posix -march=pentium-m" ./configure --disable-static --enable-shared -enable-cxx
$ make && make check

MPFR Compiling
==============
$ CFLAGS+="-posix -march=pentium-m -O0 -D__tune_i686__" ./configure --disable-static --enable-shared --disable-thread-safe --with-gmp-include=/f/workspace/WinProg/softfloat/gmp-6.0.0/ --with-gmp-lib=/f/workspace/WinProg/softfloat/gmp-6.0.0/.libs/
$ make && make check





<float.h>
compiling errors:

Commented out #include_next  at the bottom of float.h in the
two architecture include folders (e.g. i386\lib\gcc\i686-w64-mingw32\4.6.3\include).




5 - To avoid using the Microsoft runtime (which might not be conform to ISO C),
    you can use the MinGW runtime package (which is an integral part of MinGW).
    For example, with MinGW versions 3.15 and later you can get an
    ISO-compliant printf() if you compile your application with either
    '-ansi', '-posix' or '-D__USE_MINGW_ANSI_STDIO'. For example, you can
    compile and test MPFR with CC="gcc -D__USE_MINGW_ANSI_STDIO".

    For example under Win32, the following problem has been experienced with
    MPFR 2.4.0 RC1 and the MSVC runtime (msvcrt.dll):

       Error in mpfr_vsprintf (s, "%.*Zi, %R*e, %Lf%n", ...);
       expected: "00000010610209857723, -1.2345678875e+07, 0.032258"
       got:      "00000010610209857723, -1.2345678875e+07, -0.000000"
       FAIL: tsprintf.exe

    This error is due to the MSVC runtime not supporting the L length modifier
    for formatted output (e.g. printf with %Lf). You can check this with the
    following program:

       #include <stdio.h>
       int main (void)
       {
         long double d = 1. / 31.;
         printf ("%Lf\n", d);
         return 0;
       }

    The expected output is 0.032258.

    Note: The L modifier has been standard for a long time (it was added
    in ISO C89).

